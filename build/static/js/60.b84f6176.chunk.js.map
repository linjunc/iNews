{"version":3,"sources":["pages/user/components/personal-page/components/calendar/style.js","pages/user/components/personal-page/components/calendar/index.js","pages/user/components/personal-page/components/main-page/style.js","pages/user/components/personal-page/components/main-page/index.js","pages/user/components/personal-page/index.js","utils/storage.js","utils/date-format.js"],"names":["TitleWrapper","styled","div","CalendarWrapper","ButtonWrapper","Option","Select","memo","yearlyData","useContext","allUserInfoContext","calendarData","useState","setCalendarData","recentlyLoginTime","longestLoginTime","allReadingTime","showTimeDate","setShowTimeDate","useMemo","getDaysInfoInYear","allDays","endDay","useEffect","initAllDaysArr","getAllDays","length","copyYearlyData","counter","maxLongestLoginTime","flag","sort","obj1","obj2","date","dateArr","map","item","count","getTime","countArr","forEach","index","includes","Math","max","handleShowNumScope","className","defaultValue","style","width","startDate","shiftDate","endDate","values","classForValue","value","time","gutterSize","tooltipDataAttrs","toISOString","slice","rx","height","showWeekdayLabels","id","MarkedAreaWrapper","MarkedContentWrapper","TextArea","Input","myXss","xss","FilterXSS","whiteList","p","span","img","h1","h2","h3","h4","h5","h6","MainPage","markedRef","useRef","user_id","useParams","userAllInfo","userInfo","personal_page","nickname","introduction","lastPersonalPage","isShowEditBox","setIsShowEditBox","isBtnLoading","setIsBtnLoading","rendererMD","marked","Renderer","setOptions","renderer","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","current","setSession","html","process","getSession","innerHTML","previewMainPage","a","setUserInfo","res","data","msg","code","message","error","isSelf","JSON","parse","getLocal","loading","icon","viewBox","version","fillRule","d","title","onClick","e","spellCheck","onChange","target","CSSTransition","in","timeout","appear","classNames","ref","itemName","localStorage","getItem","setLocal","setItem","sessionStorage","numDays","newDate","Date","setDate","getDate","Array","from","_","i","nowYear","getFullYear","getMonthAndDay","dateStr","dayjs","format","split","day","parseInt","month","year","getLongestWeek","yearlyArr","dayNum","getDay","getWhatDay","startIndex","maxTime","maxTimeStartIndex","len","sum","j","startDay","dataArr","push"],"mappings":"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","file":"static/js/60.b84f6176.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const TitleWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 18px;\n  padding: 0 10px;\n\n  .title {\n    font-size: 1.28em;\n    font-weight: bold;\n    color: #40485b;\n  }\n`\n\nexport const CalendarWrapper = styled.div`\n  margin: 5px 0 10px 0;\n\n  .react-calendar-heatmap text {\n    font-size: 10px;\n    fill: #aaa;\n  }\n\n  svg {\n    transform: translateX(-7px);\n  }\n\n  g.react-calendar-heatmap-weekday-labels {\n    transform: translate(0, 14) !important;\n  }\n\n  g.react-calendar-heatmap-weekday-labels text {\n    font-size: 10px;\n  }\n\n  rect {\n    cursor: pointer;\n    stroke: #fff !important;\n    fill-opacity: 0.7;\n    outline: none;\n\n    &:hover {\n      fill-opacity: 1;\n    }\n  }\n\n  .react-calendar-heatmap .color-news-0 {\n    fill: #e7e7e7ee;\n  }\n  .react-calendar-heatmap .color-news-1 {\n    fill: #b8d7f3;\n  }\n  .react-calendar-heatmap .color-news-2 {\n    fill: #7fb9ed;\n  }\n  .react-calendar-heatmap .color-news-3 {\n    fill: #1890ff;\n  }\n  .react-calendar-heatmap .color-news-4 {\n    fill: #2181d8;\n  }\n`\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0 10px;\n  color: #40485b;\n\n  .statistics {\n    display: flex;\n    flex-direction: column;\n\n    .all-read-time {\n      margin: 0 20px 10px 0;\n\n      .num {\n        font-weight: 600;\n        color: #1890ff;\n      }\n    }\n  }\n\n  .color-show-box {\n    display: flex;\n    align-items: center;\n\n    .color-box {\n      display: flex;\n      justify-content: space-between;\n      width: 80px;\n      margin: 0 5px;\n\n      & > div {\n        width: 14px;\n        height: 14px;\n        border-radius: 3px;\n        cursor: pointer;\n      }\n\n      & > div:nth-child(1) {\n        background-color: #e7e7e7ee;\n      }\n\n      & > div:nth-child(2) {\n        background-color: #b8d7f3;\n      }\n\n      & > div:nth-child(3) {\n        background-color: #7fb9ed;\n      }\n\n      & > div:nth-child(4) {\n        background-color: #1890ff;\n      }\n\n      & > div:nth-child(5) {\n        background-color: #2181d8;\n      }\n    }\n  }\n\n  .ant-select:not(.ant-select-disabled):hover .ant-select-selector {\n    border-color: #1890ff;\n  }\n`\n","import React, { memo, useState, useEffect, useContext, useMemo } from 'react'\nimport CalendarHeatmap from 'react-calendar-heatmap'\nimport ReactTooltip from 'react-tooltip'\n\nimport {\n  shiftDate,\n  getDaysInfoInYear,\n  getAllDays,\n} from '../../../../../../utils/date-format'\nimport { allUserInfoContext } from '../../../../../../models/context'\n\nimport { Select } from 'antd'\n\nimport { CalendarWrapper, TitleWrapper, ButtonWrapper } from './style'\n\nconst { Option } = Select\nexport default memo(function CalendarHotGraph() {\n  // 从context中获取到日历热图所需要的数据并将状态保存下来\n  const { calendarData: yearlyData } = useContext(allUserInfoContext)\n  const [calendarData, setCalendarData] = useState(yearlyData)\n  // 在日历热图下方要展示的数据状态\n  const [showTimeDate, setShowTimeDate] = useState({\n    recentlyLoginTime: 0,\n    longestLoginTime: 0,\n    allReadingTime: 0,\n  })\n\n  // 该函数用于将每一天对应的date和count，返回的是一年中包含这些数据的新数组；最终是要传递给日历组件的\n  // 注意：返回的时间类型为对象，所以不用useMemo直接作为useEffect依赖的时候每次组件渲染都会执行函数\n  const { allDays, endDay } = useMemo(() => getDaysInfoInYear(), [])\n\n  // 当context传递过来的数据改变时，需要更新状态;由于后台只返回\n  useEffect(() => {\n    let initAllDaysArr = getAllDays(allDays, endDay)\n    const len = yearlyData.length\n    if (len) {\n      // 获取初始化数组\n      const copyYearlyData = [...yearlyData]\n      // 赋值时用的计数器变量\n      let counter = 0\n      // 用于记录用户年度阅读总时长的变量，\n      let allReadingTime = 0\n      // 用于记录用户年度最长登录时间的变量，\n      let longestLoginTime = 0\n      let maxLongestLoginTime = 0\n      // 用于记录用户年度最近最长登录时间的变量以及是否继续记录的标志\n      let recentlyLoginTime = 0\n      let flag = true\n      // 由于后台返回的时间并没有按照我们想要的时间顺序排列，所以这里要将响应结果排序\n      copyYearlyData.sort((obj1, obj2) => {\n        return obj2.date - obj1.date\n      })\n      // 将排序好的数据数组里的日期对应一个数组\n      const dateArr = copyYearlyData.map((item) => {\n        allReadingTime += item.count\n        return item.date.getTime()\n      })\n      // 将排序好的数据数组里的阅读时间对应一个数组\n      const countArr = copyYearlyData.map((item) => {\n        return item.count\n      })\n\n      initAllDaysArr.forEach((item, index) => {\n        if (dateArr.includes(item.date.getTime())) {\n          const targetObj = initAllDaysArr[index]\n          targetObj.count = countArr[counter++]\n          longestLoginTime++\n          flag && recentlyLoginTime++\n          maxLongestLoginTime = Math.max(maxLongestLoginTime, longestLoginTime)\n        } else {\n          longestLoginTime = 0\n          if (maxLongestLoginTime) {\n            flag = false\n          }\n        }\n      })\n      setShowTimeDate({\n        recentlyLoginTime,\n        longestLoginTime: maxLongestLoginTime,\n        allReadingTime,\n      })\n    }\n    // 无论数组长度是否为0都要更新状态\n    setCalendarData(initAllDaysArr)\n  }, [yearlyData, allDays, endDay])\n\n  // 用户鼠标经过颜色格子的时候显示颜色对应的范围\n  const handleShowNumScope = (index) => {\n    switch (index) {\n      case 0:\n        return '0 min'\n      case 1:\n        return '0 ~ 20 min'\n      case 2:\n        return '20 ~ 60 min'\n      case 3:\n        return '60 ~ 120 min'\n      case 4:\n        return '超过120 min'\n      default:\n        return '0 min'\n    }\n  }\n\n  return (\n    <CalendarWrapper>\n      <TitleWrapper>\n        <h1 className=\"title\">阅读日历</h1>\n        <Select defaultValue=\"2024\" style={{ width: 120 }}>\n          <Option>2024</Option>\n        </Select>\n      </TitleWrapper>\n      <CalendarHeatmap\n        startDate={shiftDate(endDay, -allDays)} // 日历的开始时间，要根据平年闰年计算出往前推的天数\n        endDate={endDay} // 结束时间，只需调成每一年的最后一天即可\n        values={calendarData} // 记录着每一年每一天的数据\n        classForValue={(value) => {\n          // 根据对应的value值决定类名的函数\n          const time = value && value.count\n          if (!time) {\n            return 'color-news-0'\n          } else if (time < 20) {\n            return `color-news-1`\n          } else if (time < 60) {\n            return `color-news-2`\n          } else if (time < 120) {\n            return `color-news-3`\n          } else {\n            return `color-news-4`\n          }\n        }}\n        gutterSize={2} // 相对于正方形的大小\n        tooltipDataAttrs={(value) => {\n          // 这个回调的参数其实就是对应天数的value值，包含date和count属性\n          return {\n            'data-tip': `${\n              (value.date && value.date.toISOString().slice(0, 10)) || ''\n            }  浏览时间: ${value.count}min`, // 这里toolTip组件要提示的信息\n            rx: 2,\n            width: '12px',\n            height: '12px',\n          }\n        }}\n        showWeekdayLabels={true}\n      />\n      <ButtonWrapper>\n        <div className=\"statistics\">\n          <span className=\"all-read-time\">\n            最近连续登陆时间:{' '}\n            <span className=\"num\">{showTimeDate.recentlyLoginTime}</span> 天\n          </span>\n          <span className=\"all-read-time\">\n            最长连续登陆时间：\n            <span className=\"num\">{showTimeDate.longestLoginTime}</span> 天\n          </span>\n          <span className=\"all-read-time\">\n            最近一年浏览总时间：\n            <span className=\"num\">{showTimeDate.allReadingTime}</span> 分钟\n          </span>\n        </div>\n        <div className=\"color-show-box\">\n          少\n          <div className=\"color-box\">\n            {[1, 2, 3, 4, 5].map((item, index) => {\n              return (\n                <div\n                  key={index}\n                  data-for=\"showScope\"\n                  data-tip={handleShowNumScope(index)}\n                ></div>\n              )\n            })}\n          </div>\n          多\n        </div>\n      </ButtonWrapper>\n      <ReactTooltip />\n      {/* 给ReactTooltip组件设置的id属性是为了让其能根据data-for属性找到对应的触发元素 */}\n      <ReactTooltip id=\"showScope\" />\n    </CalendarWrapper>\n  )\n})\n","import styled from 'styled-components'\n\nexport const MarkedAreaWrapper = styled.div`\n  padding: 10px;\n  max-height: 330px;\n  overflow-y: auto;\n  border-bottom: 2px solid #eee;\n\n  // 设置文本框滚动条的样式\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n  // 滚动槽\n  &::-webkit-scrollbar-track {\n    color: #fbfbfb;\n  }\n  // 滚动条滑块\n  &::-webkit-scrollbar-thumb {\n    background-color: rgb(221, 219, 219);\n    border-radius: 10px;\n    box-shadow: inset 2px 2px 5px 0 rgba(#fff, 0.5);\n  }\n\n  .title {\n    justify-content: flex-end;\n    height: 32px;\n\n    h1 {\n      font-size: 1.28em;\n      font-weight: bold;\n      color: #40485b;\n    }\n\n    .edit {\n      cursor: pointer;\n\n      svg:hover {\n        fill: #1772dc;\n      }\n    }\n\n    .preview-btn {\n      display: flex;\n      align-items: center;\n      padding: 0 8px;\n      height: 28px;\n      margin-top: 8px;\n      cursor: pointer;\n\n      svg {\n        margin-right: 5px;\n        transition: all 0.3s;\n      }\n\n      &:hover {\n        svg {\n          fill: #1772dc;\n        }\n      }\n    }\n  }\n\n  .marked-appear {\n    max-height: 0;\n  }\n\n  .marked-appear-active {\n    max-height: 300px;\n    overflow-y: hidden;\n    transition: all 1.5s;\n  }\n\n  .ant-input {\n    margin-top: 10px !important;\n    height: 600px !important;\n    resize: none;\n\n    // 设置文本框滚动条的样式\n    &::-webkit-scrollbar {\n      width: 4px;\n    }\n    // 滚动槽\n    &::-webkit-scrollbar-track {\n      color: #fbfbfb;\n    }\n    // 滚动条滑块\n    &::-webkit-scrollbar-thumb {\n      background-color: rgb(221, 219, 219);\n      border-radius: 10px;\n      box-shadow: inset 2px 2px 5px 0 rgba(#fff, 0.5);\n    }\n  }\n\n  .scroll.show-area {\n    height: 100%;\n  }\n`\n\n// 初始化markdown所需要的css格式\nexport const MarkedContentWrapper = styled.div`\n  pre,\n  code {\n    font-size: 0.85em;\n    font-family: Consolas, Inconsolata, Courier, monospace;\n  }\n\n  code {\n    margin: 0 0.15em;\n    padding: 0 0.3em;\n    white-space: pre-wrap;\n    border: 1px solid #eaeaea;\n    background-color: #f8f8f8;\n    border-radius: 3px;\n    display: inline; /* added to fix Yahoo block display of inline code */\n  }\n\n  pre {\n    font-size: 1em;\n    line-height: 1.2em;\n  }\n\n  pre code {\n    white-space: pre;\n    overflow: auto; /* fixes issue #70: Firefox/Thunderbird: Code blocks with horizontal scroll would have bad background colour */\n    border-radius: 3px;\n    border: 1px solid #ccc;\n    padding: 0.5em 0.7em;\n    display: block !important;\n  }\n\n  p {\n    margin: 0 0 10px 0 !important;\n  }\n\n  table,\n  pre,\n  dl,\n  blockquote,\n  q,\n  ul,\n  ol {\n    margin: 1.2em 0;\n  }\n\n  ul,\n  ol {\n    padding-left: 2em;\n    margin: 0;\n  }\n\n  li {\n    margin: 0.5em 0;\n    font-size: 16px;\n  }\n\n  li p {\n    margin: 0.5em 0 !important;\n  }\n\n  /* Smaller spacing for sub-lists */\n  ul ul,\n  ul ol,\n  ol ul,\n  ol ol {\n    margin: 0;\n    padding-left: 1em;\n  }\n\n  /* Use letters for unordered-lists. (Like Github.) */\n  ul ul,\n  ul,\n  ul {\n    list-style-type: square;\n    font-size: 16px;\n  }\n\n  /* Use letters for sub-ordered-lists. (Like Github.) */\n  ol ol,\n  ul ol {\n    list-style-type: lower-roman;\n  }\n\n  /* Use Roman numerals for sub-sub-ordered lists. (Like Github.) */\n  ul ul ol,\n  ul ol ol,\n  ol ul ol,\n  ol ol ol {\n    list-style-type: lower-alpha;\n  }\n\n  ul > li {\n    list-style: disc;\n  }\n\n  dl {\n    padding: 0;\n  }\n\n  dl dt {\n    font-size: 1em;\n    font-weight: bold;\n    font-style: italic;\n  }\n\n  dl dd {\n    margin: 0 0 1em;\n    padding: 0 1em;\n  }\n\n  blockquote,\n  q {\n    border-left: 4px solid #ddd;\n    padding: 0 1em;\n    color: #777;\n    quotes: none;\n  }\n\n  blockquote::before,\n  blockquote::after,\n  q::before,\n  q::after {\n    content: none;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin-bottom: 10px;\n    padding: 0;\n    font-weight: bold;\n  }\n  h1 {\n    font-size: 24px;\n  }\n  h2 {\n    font-size: 22px;\n  }\n  h3 {\n    font-size: 20px;\n  }\n  h4 {\n    font-size: 18px;\n  }\n  h5 {\n    font-size: 16px;\n  }\n  h6 {\n    font-size: 16px;\n    color: #777;\n  }\n  h1,\n  h2 {\n    padding-bottom: 6.3px;\n    border-bottom: 1px solid #eee;\n  }\n  table {\n    padding: 0;\n    border-collapse: collapse;\n    border-spacing: 0;\n    font-size: 1em;\n    font: inherit;\n    border: 0;\n  }\n\n  tbody {\n    margin: 0;\n    padding: 0;\n    border: 0;\n  }\n\n  table tr {\n    border: 0;\n    border-top: 1px solid #ccc;\n    background-color: white;\n    margin: 0;\n    padding: 0;\n  }\n\n  table tr:nth-child(2n) {\n    background-color: #f8f8f8;\n  }\n\n  table tr th,\n  table tr td {\n    font-size: 1em;\n    border: 1px solid #ccc;\n    margin: 0;\n    padding: 0.5em 1em;\n  }\n\n  table tr th {\n    font-weight: bold;\n    background-color: #f0f0f0;\n  }\n\n  p {\n    font-size: 16px;\n    line-height: 1.75em;\n    padding-right: 0.5em;\n    padding-left: 0.5em;\n  }\n\n  strong,\n  b {\n    font-weight: bolder !important;\n  }\n`\n","import React, { useRef, useEffect, useState, useContext } from 'react'\nimport { useParams } from 'react-router'\nimport { marked } from 'marked'\nimport { CSSTransition } from 'react-transition-group'\nimport xss from 'xss'\n\nimport { setUserInfo } from '../../../../../../services/user'\nimport {\n  getLocal,\n  getSession,\n  setSession,\n} from '../../../../../../utils/storage'\nimport { allUserInfoContext } from '../../../../../../models/context'\n\nimport { Button, Input, message } from 'antd'\n\nimport { MarkedContentWrapper, MarkedAreaWrapper } from './style'\n\nconst { TextArea } = Input\n// 配置过滤xss攻击的白名单\nconst myXss = new xss.FilterXSS({\n  whiteList: {\n    div: ['align', 'title', 'style'],\n    p: ['align', 'style'],\n    span: ['align', 'style'],\n    img: ['align', 'alt', 'src', 'target', 'title', 'style'],\n    h1: ['align', 'style'],\n    h2: ['align', 'style'],\n    h3: ['align', 'style'],\n    h4: ['align', 'style'],\n    h5: ['align', 'style'],\n    h6: ['align', 'style'],\n  },\n})\nexport default function MainPage() {\n  // 用于记录预览框的dom元素\n  const markedRef = useRef()\n  const { id: user_id } = useParams()\n  // 从context中获取用户信息\n  const { userInfo: userAllInfo } = useContext(allUserInfoContext)\n  let { personal_page, nickname, introduction } = userAllInfo\n  // 记录上一此更改个人主页的代码\n  let lastPersonalPage = useRef(personal_page)\n  // 用于表示是否展示编辑框的状态\n  const [isShowEditBox, setIsShowEditBox] = useState(false)\n  // 控制按钮是否处于加载的状态\n  const [isBtnLoading, setIsBtnLoading] = useState(false)\n\n  // 对marked实例进行一些配置\n  const rendererMD = new marked.Renderer()\n  marked.setOptions({\n    renderer: rendererMD,\n    gfm: true, // 允许 Git Hub标准的markdown.\n    tables: true, // 允许支持表格语法。该选项要求 gfm 为true\n    breaks: true, // 允许回车换行\n    pedantic: false, // 不纠正原始模型任何的不良行为和错误\n    sanitize: false, // 对输出进行过滤（清理），将忽略任何已经输入的html代码（标签）\n    smartLists: true, // 使用比原生markdown更时髦的列表。 旧的列表将可能被作为pedantic的处理内容过滤掉.\n    smartypants: false, // 使用更为时髦的标点，比如在引用语法中加入破折号。\n  }) //基本设置\n\n  // 当personal_page的值更改时更新上一次存储的代码值\n  useEffect(() => {\n    lastPersonalPage.current = personal_page\n  }, [personal_page])\n\n  // 组件第一次挂载到页面上时在本地存取个人信息\n  useEffect(() => {\n    setSession('personal_page', personal_page)\n  }, [personal_page])\n\n  useEffect(() => {\n    if (!isShowEditBox && personal_page) {\n      // 在将用户输入的内容渲染到页面之前先做一次xss攻击过滤\n      const html = myXss.process(getSession('personal_page') || personal_page)\n      markedRef.current.innerHTML = marked(html)\n    }\n  }, [isShowEditBox, personal_page])\n\n  // 用户点击预览按钮之后要像后台发送请求保存更改的个人主页数据\n  const previewMainPage = async () => {\n    const value = getSession('personal_page')\n    if (lastPersonalPage.current !== value) {\n      setIsBtnLoading(true)\n      lastPersonalPage.current = value\n      try {\n        const res = await setUserInfo({\n          nickname,\n          introduction,\n          personal_page: value,\n        })\n        const { msg, code } = res.data\n        if (code === 200) {\n          personal_page = res.data.userInfo.personal_page\n        } else {\n          message.error(msg)\n        }\n      } catch (err) {\n        message.error(err)\n      } finally {\n        setIsBtnLoading(false)\n      }\n    }\n    setIsShowEditBox(false)\n  }\n\n  // 判断是否为他人访问个人主页\n  const { user_id: self_id } = JSON.parse(getLocal('userInfo') || '{}')\n  const isSelf = user_id === self_id\n\n  return (\n    <MarkedAreaWrapper>\n      {isSelf && personal_page && (\n        <div className=\"title middle-item\">\n          {!isShowEditBox ? (\n            <div\n              className=\"edit middle-item\"\n              title=\"编辑个人主页\"\n              onClick={(e) => setIsShowEditBox(true)}\n            >\n              <svg height=\"16\" width=\"16\">\n                <path d=\"M11.013 1.427a1.75 1.75 0 012.474 0l1.086 1.086a1.75 1.75 0 010 2.474l-8.61 8.61c-.21.21-.47.364-.756.445l-3.251.93a.75.75 0 01-.927-.928l.929-3.25a1.75 1.75 0 01.445-.758l8.61-8.61zm1.414 1.06a.25.25 0 00-.354 0L10.811 3.75l1.439 1.44 1.263-1.263a.25.25 0 000-.354l-1.086-1.086zM11.189 6.25L9.75 4.81l-6.286 6.287a.25.25 0 00-.064.108l-.558 1.953 1.953-.558a.249.249 0 00.108-.064l6.286-6.286z\"></path>\n              </svg>\n            </div>\n          ) : (\n            <Button\n              className=\"preview-btn\"\n              loading={isBtnLoading}\n              icon={\n                <svg\n                  aria-hidden=\"true\"\n                  height=\"16\"\n                  viewBox=\"0 0 16 16\"\n                  version=\"1.1\"\n                  width=\"16\"\n                  data-view-component=\"true\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M1.679 7.932c.412-.621 1.242-1.75 2.366-2.717C5.175 4.242 6.527 3.5 8 3.5c1.473 0 2.824.742 3.955 1.715 1.124.967 1.954 2.096 2.366 2.717a.119.119 0 010 .136c-.412.621-1.242 1.75-2.366 2.717C10.825 11.758 9.473 12.5 8 12.5c-1.473 0-2.824-.742-3.955-1.715C2.92 9.818 2.09 8.69 1.679 8.068a.119.119 0 010-.136zM8 2c-1.981 0-3.67.992-4.933 2.078C1.797 5.169.88 6.423.43 7.1a1.619 1.619 0 000 1.798c.45.678 1.367 1.932 2.637 3.024C4.329 13.008 6.019 14 8 14c1.981 0 3.67-.992 4.933-2.078 1.27-1.091 2.187-2.345 2.637-3.023a1.619 1.619 0 000-1.798c-.45-.678-1.367-1.932-2.637-3.023C11.671 2.992 9.981 2 8 2zm0 8a2 2 0 100-4 2 2 0 000 4z\"\n                  ></path>\n                </svg>\n              }\n              title=\"保存并预览\"\n              onClick={previewMainPage}\n            >\n              Preview\n            </Button>\n          )}\n        </div>\n      )}\n      {isShowEditBox ? (\n        <TextArea\n          spellCheck=\"false\" // 不让其检查拼写问题\n          defaultValue={getSession('personal_page') || personal_page}\n          onChange={(e) => setSession('personal_page', e.target.value)}\n        />\n      ) : (\n        <CSSTransition in={true} timeout={1500} appear classNames=\"marked\">\n          <MarkedContentWrapper ref={markedRef} />\n        </CSSTransition>\n      )}\n    </MarkedAreaWrapper>\n  )\n}\n","import React, { memo } from 'react'\n\nimport CalendarHotGraph from './components/calendar'\nimport MainPage from './components/main-page'\n\nexport default memo(function PersonalPage() {\n  return (\n    <div>\n      <MainPage />\n      <CalendarHotGraph />\n    </div>\n  )\n})\n","// 从本地存储中获取数据的函数\nexport const getLocal = (itemName) => {\n  return localStorage.getItem(itemName)\n}\n\n// 存取数据到本地的函数\nexport const setLocal = (itemName, item) => {\n  localStorage.setItem(itemName, item)\n}\n\n// 从会话存储中获取数据的函数\nexport const getSession = (itemName) => {\n  return sessionStorage.getItem(itemName)\n}\n\n// 存取数据到会话数据的函数\nexport const setSession = (itemName, item) => {\n  sessionStorage.setItem(itemName, item)\n}\n\n// 将取出来数据中的实体字符转为innerHTML能够解析成的标签形式\n// const escapeHtml = str => {\n//   const arrEntities = { lt: '<', gt: '>', nbsp: ' ', amp: '&', quot: '\"' }\n//   return (\n//     str && str.replace(/&(lt|gt|nbsp|amp|quot);/gi, function (all, t) {\n//       return arrEntities[t]\n//     })\n//   )\n// }\n","import dayjs from 'dayjs'\n\n// 该函数主要是用于生成一个新的时间戳\nexport const shiftDate = (date, numDays) => {\n  const newDate = new Date(date)\n  newDate.setDate(newDate.getDate() + numDays) // setDate方法会改变原变量，用于得到某一天的日期\n  return newDate\n}\n\n// 创建一个不同层次但共包含一年总天数的数组，作用是为了处理日历上的日期\nexport const getRange = (count) => {\n  // 如果第一个参数是一个对象并且里面有一个length属性的话，可以帮助我们生成一个length长度的数组，第二个参数的返回值就是数组每一项对应的元素值\n  return Array.from({ length: count }, (_, i) => i)\n}\n\n// 返回一个从一年第一天到最后一天的数组\nexport const getAllDays = (allDays, endDay) => {\n  // 判断当前的年份，并且要判断出是平年还是闰年，最终再决定这个天数\n  const allDaysArr = getRange(allDays).map((index) => {\n    return {\n      date: new Date(shiftDate(endDay, -index)),\n      count: 0,\n    }\n  })\n  return allDaysArr\n}\n\n// 该函数用于获取当前年份并返回一年中的总天数和结束日期等数据\nexport const getDaysInfoInYear = () => {\n  const nowTime = new Date()\n  const nowYear = nowTime.getFullYear()\n  // 当new Date()第三个参数为0时可以获取指定年份年2月份的天数，如果2月份的最后一天是29，那么该年就是闰年 ,否则为平年，最终可得到一天准确天数\n  const allDays = new Date(nowYear, 2, 0).getDate() === 28 ? 365 : 366\n  const endDay = new Date(`${nowYear}-12-31`)\n\n  return {\n    nowYear,\n    allDays,\n    endDay,\n  }\n}\n\n// 通过日期字符串获取日期上的年份、月份以及天数\nexport const getMonthAndDay = (dateStr) => {\n  dateStr = dayjs(dateStr).format('YYYY-MM-DD HH:mm:ss')\n  const dateArr = dateStr.split('-')\n  return {\n    day: parseInt(dateArr[2]),\n    month: parseInt(dateArr[1]),\n    year: parseInt(dateArr[0]),\n  }\n}\n\n// 根据日期获取这天是周几\nexport const getWhatDay = (dateStr) => {\n  const dateArr = dateStr.split('-')\n  const date = new Date(dateArr[0], parseInt(dateArr[1] - 1), dateArr[2])\n  const dayNum = date.getDay() // 这样就可以获取到现在是一周的第几天，周日返回的是0，周一返回的是1....\n  return dayNum\n}\n\n// 该函数用于返回一年中阅读时间最长周末的起始日期、结束日期以及阅读时间总和\nexport const getLongestWeek = (yearlyArr) => {\n  // 获取该年中第一天是星期几\n  if (!yearlyArr.length) return\n  const dayNum = getWhatDay(\n    dayjs(yearlyArr[0].date).format('YYYY-MM-DD HH:mm:ss').slice(0, 10),\n  )\n\n  // 判断该年的第一天是否为周一\n  let startIndex = 0\n  if (!dayNum) {\n    // 说明第一天是周日\n    startIndex = 1\n  } else if (dayNum === 1) {\n    // 说明第一天是周一\n    startIndex = 0\n  } else {\n    startIndex = 8 - dayNum\n  }\n\n  // 定义周末阅读最长时间变量和周末开始时对应数组的下标值\n  let maxTime = 0\n  let maxTimeStartIndex = startIndex\n\n  // 计算用户一年中周末阅读的最长时间以及该周末在数组上对应的下标\n  for (\n    let i = startIndex, len = yearlyArr.length - startIndex - 6;\n    i < len;\n    i = i + 7\n  ) {\n    let sum = 0\n    for (let j = i; j < i + 7; j++) {\n      sum += yearlyArr[j].count\n    }\n    if (maxTime < sum) {\n      maxTimeStartIndex = i\n      maxTime = sum\n    }\n  }\n  // 获取到最大阅读时间周末的起始日期和结束日期\n  const startDay = yearlyArr[maxTimeStartIndex].date\n  const endDay = yearlyArr[maxTimeStartIndex + 6].date\n\n  // 将这一星期每一天对应的阅读数据放到数组中去\n  const dataArr = []\n  for (let i = maxTimeStartIndex, len = maxTimeStartIndex + 7; i < len; i++) {\n    dataArr.push(yearlyArr[i].count)\n  }\n  return {\n    startDay,\n    endDay,\n    maxTime,\n    dataArr,\n  }\n}\n"],"sourceRoot":""}